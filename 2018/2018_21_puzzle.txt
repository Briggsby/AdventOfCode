0 - [4] = 123
1 - [4] = [4] & 456
2 - [4] = [4] == 72
3 - [3] = [3] + [4] (Go to 1 if [4] != 72, else 5)
4 - [3] = 0 (Go to step 1)
5 - [4] = 0
6 - [2] = [4] | 65536 (if [4] == 0, set [2] = 65536)
7 - [4] = 6152285
8 - [1] = [2] & 255 (if [2] == 65536, [1] = 0)
9 - [4] = [4] + [1]
10 - [4] = [4] & 16777215 (if [4] == 6152285, [4] = 6152285)
11 - [4] = [4] * 65899 (if [4] = 6152285, [4] = 405429429215)
12 - [4] = [4] & 16777215 (if [4] = 405429429215, [4] = 8004575)
13 - [1] = 256 > [2]
14 - [3] = [3] + [1] (if 256 > [2], go to 28, else go to 17)
15 - [3] = [3] + 1 (go to 17)
16 - [3] = 27 (go to 28)
17 - [1] = 0
18 - [5] = [1] + 1
19 - [5] = [5] * 256 (if [5] == 0, [5] = 0)
20 - [5] = [5] > 2  (if [5] == 0, [5] = 0)
21 - [3] = [3] + [5] (if [5] * 256 > [2], go to 23, else go to 22)
22 - [3] = [3] + 1 (go to 24 (add 1 to [1], then go to 18))
23 - [3] = 25 (go to 26 (set [2] to [1], then go to 8)
24 - [1] = [1] + 1
25 - [3] = 17 (go to 18)
26 - [2] = [1]
27 - [3] = 7 (go to 8)
28 - [1] = [4] == [0]
29 - [3] = [3] + [1] (end if [4] == [0], else go to 6)
30 - [3] = 5 (go to 6)

'Go to's:
1 (infinite loop if bani is stringwise)
5 (start program)
8 (if [5] * 256 > [2])
17 (if [2] >= 256)
18 (if 
23 (if [5] * 256 > [2])
28
End (if [2] < 256)

65536 = 10000000000000000 (2^16, 1 1, 16 0s)
6152285 = 10111011110000001011101 (24 digits


Set 2 to 10000000000000000
Make 4:
	10000000000000000 & 255 = 10000000000000000

	10111011110000001011101
       +      10000000000000000 = 10111101110000001011101

	10111101110000001011101
      &111111111111111111111111 = 10111101110000001011101 (limits to 24 bits)

	10111101110000001011101 * 65899, then limited to 23 bits
       *
	

