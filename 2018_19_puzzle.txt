0. [2] = [2]+16 (ALTERS 2)
1. [1] = 1
2. [5] = 1			[5] = 1
3. [4] = [1]*[5]		if [3]==[1]*[5] goto 7, else 8
4. [4] = [3]==[4]
5. [2] = [2]+[4] (ALTERS 2)
6. [2] = [2]+ 1 (ALTERS 2)
7. [0] = [0]+[1] (ALTERS 0)
8. [5] = [5] + 1
9. [4] = [5] > [3]
10. [2] = [2] + [4] (ALTERS 2)
11. [2] = 2 (ALTERS 2)
12. [1] = [1] + 1
13. [4] = [1] > [3]
14. [2] = [4] + [2] (ALTERS 2)
15. [2] = 1 (ALTERS 2)
16. [2] = [2]**2 (ALTERS 2)
17. [3] = [3]+2
18. [3] = [3]*[3]
19. [3] = [2]*[3]
20. [3] = [3]*11
21. [4] = [4] + 7
22. [4] = [4] * [2]
23. [4] = [4] + 6
24. [3] = [3] + [4]
25. [2] = [2] + [0] (ALTERS 2)
26. [2] = 0 (ALTERS 2)
27. [4] = [2]
28. [4] = [4] * [2]
29. [4] = [4] + [2]
30. [4] = [4] * [2]
31. [4] = [4] * 14
32. [4] = [4] * [2]
33. [3] = [4] + [3]
34. [0] = 0
35. [2] = 0

Only ends when either [0] >= 10 and 25 is run, or when 16 is run
	16 is run whenever [1] > [3] and 13 in run
		13 is run whenever [5]+1 > [3] and 
	25 is only run whenever 17 is run


From code file, can see that only instructions up to 17 and what it leads to are even run

So first, 3 and 4 are set to 391512 and 390516 respectively, then 0 is set to 0
Then starts from function 1
3 and 8 are repeated, [5] increasing by 1, then checked if greater than [3]. [0] is increased just after [5], until [5] is greater than 391512 (func 8 -> func 3 loop)
Once it is, [1] is increased by 1 to be equal to 2 (func 8 -> func 2)
[0] is increased by 1 to 391512, because [3] is not equal to 2*[5]. Then func 8 is called (func 2 -> func 8)

Only 3, 2, and 8 are called
f2 checks if [1] * [5] == 3, and if it odesn't then
f8 stops when [1] is bigger than [3]
[3] isn't changed by anything, always 391512
so f8 stop when [1] is > 391512
[1] is increased by f8, every time [5] is bigger than 391512
[5] is increased by 8 every time it is called
After f8 is called 391512 times to get [1] big enough, after being called 39512 times to get [5] big enough, function ends.

Function 3 increases 0 every time, except the last two times 

f3->f8 is done 391512 times, until [5] > [3]. Each time [0] is increased by 1. [0] goes to 391512, then:
f2->f8 is done until [1] > [3] Each time [1] is increased by 1, then [0] is increased by 1. This is done 391512 times, each time [0] increased by 1. 

Function 8:
[2, 1, X, 391512, 0, 2]
[5] + 1, [0] +1
Repeated 391511 times:
[391512, 1, X, 391512, 0, 391513]
Function 8:
[1] +1, [0]+1
[391513, 2, X, 391512, 0, 391513]
[5] + 1, [0] + 1, [1]+1
Repeated 391510 times
[




Decoded:
0. run [2] + 17
1. [1][5] = 1 then if [3] == 1, [4] and does 7, or if [3] != 1, [4] 0, does 6 
3. [4] = [3] == 5, run 5
